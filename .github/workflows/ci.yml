name: DuckBug CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  # Backend
  GO_VERSION: "1.24"
  GOLANGCI_VERSION: "v1.64.2"
  
  # Frontend
  NODE_VERSION: "20"
  
  # Docker
  REGISTRY: ghcr.io/${{ github.repository }}
  REGISTRY_HOST: ghcr.io
  REGISTRY_USERNAME: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  
  # Images
  BACKEND_IMAGE_NAME: "duckbug-api"
  FRONTEND_IMAGE_NAME: "duckbug-web"
  IMAGE_VERSION: "latest"

jobs:
  backend-analyze:
    name: Backend Analysis
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ~${{ env.GO_VERSION }}

      - name: Install swag
        run: go install github.com/swaggo/swag/cmd/swag@latest

      - name: Generate Swagger docs
        run: swag init -g ./cmd/fuckbug/main.go

      - name: Linters
        uses: golangci/golangci-lint-action@v4
        with:
          version: ${{ env.GOLANGCI_VERSION }}
          working-directory: ./backend
          args: --timeout=5m --verbose

  backend-tests:
    name: Backend Tests
    needs: backend-analyze
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ~${{ env.GO_VERSION }}

      - name: Install swag
        run: go install github.com/swaggo/swag/cmd/swag@latest

      - name: Generate Swagger docs
        run: swag init -g ./cmd/fuckbug/main.go

      - name: Unit tests
        run: go test -v -count=1 -race -timeout=1m ./...

      - name: Optimization tests
        run: go test -v -count=1 -timeout=1m -tags bench ./...

  frontend-analyze:
    name: Frontend Analysis
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: ESLint
        run: npm run lint:js

      - name: StyleLint
        run: npm run lint:styles

      - name: Prettier
        run: npm run lint:prettier

      - name: TypeScript check
        run: npm run type-check

  frontend-tests:
    name: Frontend Tests
    needs: frontend-analyze
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:ci

  build-backend:
    name: Build Backend
    needs: [backend-tests]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Docker login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_HOST }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/build/fuckbug/Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.IMAGE_VERSION }}

  build-frontend:
    name: Build Frontend
    needs: [frontend-tests]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Docker login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_HOST }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Inject branch slug
        uses: rlespinasse/github-slug-action@v3.x

      - name: Set image tag
        run: echo "IMAGE_TAG=${GITHUB_REF_SLUG}-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/docker/production/nginx/Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.IMAGE_VERSION }}

  deploy:
    name: Deploy to Production
    needs: [build-backend, build-frontend]
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Inject branch slug
        uses: rlespinasse/github-slug-action@v3.x

      - name: Set image tag
        run: echo "IMAGE_TAG=${GITHUB_REF_SLUG}-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.PRODUCTION_KEY }}
          known_hosts: ${{ vars.PRODUCTION_HOST }}

      - name: Deploy backend
        run: |
          ssh -o StrictHostKeyChecking=no deploy@${{ vars.PRODUCTION_HOST }} -p ${{ vars.PRODUCTION_PORT }} 'docker login -u=${{ env.REGISTRY_USERNAME }} -p=${{ env.REGISTRY_PASSWORD }} ${{ env.REGISTRY }}'
          ssh -o StrictHostKeyChecking=no deploy@${{ vars.PRODUCTION_HOST }} -p ${{ vars.PRODUCTION_PORT }} 'docker pull ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.IMAGE_VERSION }}'
        env:
          REGISTRY_USERNAME: ${{ env.REGISTRY_USERNAME }}
          REGISTRY_PASSWORD: ${{ env.REGISTRY_PASSWORD }}

      - name: Deploy frontend
        run: |
          ssh -o StrictHostKeyChecking=no deploy@${{ vars.PRODUCTION_HOST }} -p ${{ vars.PRODUCTION_PORT }} 'docker pull ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.IMAGE_VERSION }}'
          ssh -o StrictHostKeyChecking=no deploy@${{ vars.PRODUCTION_HOST }} -p ${{ vars.PRODUCTION_PORT }} 'cd ${{ vars.PROJECT_NAME }}/v_${GITHUB_RUN_NUMBER} && docker compose up --build --remove-orphans -d'
        env:
          REGISTRY_USERNAME: ${{ env.REGISTRY_USERNAME }}
          REGISTRY_PASSWORD: ${{ env.REGISTRY_PASSWORD }}
          BUILD_NUMBER: ${GITHUB_RUN_NUMBER}
          HOST: ${{ vars.PRODUCTION_HOST }}
          PORT: ${{ vars.PRODUCTION_PORT }}
          PROJECT_NAME: ${{ vars.PROJECT_NAME }}
          DOMAIN: ${{ vars.DOMAIN }}
          REACT_APP_API_BASE_URL: 'https://api.fuckbug.io/v1'
