services:
  # Reverse proxy
  traefik:
    image: traefik:3.3
    command:
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      - --entryPoints.http.address=:80
      - --entryPoints.websecure.address=:443
    ports:
      - "80:80"
    networks:
      - traefik-public
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: ./deployments/development/Dockerfile
    volumes:
      - ./backend:/app
    environment:
      - AIR_WORKSPACE_ROOT=${AIR_WORKSPACE_ROOT:-/app}
      - GOPATH=${GOPATH:-/go}
      - API_PORT=${API_PORT:-8080}
    command: air -c .air.toml
    ports:
      - "2345:2345"  # Delve debugger
    networks:
      - traefik-public
      - backend-network
      - frontend-network

  # Frontend Web
  frontend:
    build:
      context: ./frontend/docker/development/nginx
    networks:
      - traefik-public
      - frontend-network
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.frontend.rule=Host(`duckbug.localhost`) || Host(`www.duckbug.localhost`)
      - traefik.http.routers.frontend.entryPoints=http
      - traefik.http.services.frontend.loadBalancer.server.port=80
      - traefik.http.middlewares.frontend-redirect.redirectRegex.regex=^(https?://)www.duckbug.localhost/(.*)$$
      - traefik.http.middlewares.frontend-redirect.redirectRegex.replacement=$${1}duckbug.localhost/$${2}
      - traefik.http.middlewares.frontend-redirect.redirectRegex.permanent=true
      - traefik.http.routers.frontend.middlewares=frontend-redirect

  # Frontend development server
  frontend-node:
    build:
      context: ./frontend/docker/development/node
    environment:
      - WDS_SOCKET_PORT=${WDS_SOCKET_PORT:-0}
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://duckbug.localhost/api/v1}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: >
      bash -c 'until [ -f .ready ]; do sleep 1 ; done &&
      npm install &&
      npm run dev'
    tty: true
    networks:
      - frontend-network
      - backend-network

  # Frontend CLI for linting/testing
  frontend-cli:
    build:
      context: ./frontend/docker/development/node
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - frontend-network

  # Backend linter
  backend-lint:
    image: golangci/golangci-lint:v1.64.2
    volumes:
      - ./backend:/app
    working_dir: /app
    command: golangci-lint run -v
    networks:
      - backend-network

  # Database (if needed)
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-duckbug}
      POSTGRES_USER: ${POSTGRES_USER:-duckbug}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-duckbug}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend-network


networks:
  traefik-public:
    name: traefik-public
  backend-network:
    driver: bridge
  frontend-network:
    driver: bridge

volumes:
  postgres_data:
