{
    "swagger": "2.0",
    "info": {
        "description": "This is DuckBug.io API.",
        "title": "DuckBug API",
        "termsOfService": "https://duckbug.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "support@duckbug.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0"
    },
    "paths": {
        "/ingest/{projectID}:{key}/errors": {
            "post": {
                "description": "Creates a new error entry in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ingest"
                ],
                "summary": "Create a new error entry",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "projectID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Public key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Error entry creation data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/errors.Create"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created error entry",
                        "schema": {
                            "$ref": "#/definitions/errors.Entity"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ingest/{projectID}:{key}/logs": {
            "post": {
                "description": "Creates a new log entry in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ingest"
                ],
                "summary": "Create a new log entry",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "projectID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Public key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Log entry creation data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/log.Create"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created log entry",
                        "schema": {
                            "$ref": "#/definitions/log.Entity"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/error-groups": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of all errors from the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "error-groups"
                ],
                "summary": "Get all error groups",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Time errors from",
                        "name": "timeFrom",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Time errors to",
                        "name": "timeTo",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search in message field",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order (asc or desc)",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of errors",
                        "schema": {
                            "$ref": "#/definitions/errorsgroup.EntityList"
                        }
                    }
                }
            }
        },
        "/v1/error-groups/status:batch": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "error-groups"
                ],
                "summary": "Batch update error groups status",
                "parameters": [
                    {
                        "description": "IDs and status",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/errorsgroup.BatchUpdateStatusRequest"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/v1/error-groups/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get an error group by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "error-groups"
                ],
                "summary": "Get an error group by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Error ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/errorsgroup.Entity"
                        }
                    }
                }
            }
        },
        "/v1/error-groups/{id}/status": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "error-groups"
                ],
                "summary": "Update error group status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Error Group ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New status",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/errorsgroup.UpdateStatusRequest"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/v1/errors": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of all errors from the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "errors"
                ],
                "summary": "Get all errors",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Group ID",
                        "name": "groupId",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Time errors from",
                        "name": "timeFrom",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Time errors to",
                        "name": "timeTo",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search in message field",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order (asc or desc)",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of errors",
                        "schema": {
                            "$ref": "#/definitions/errors.EntityList"
                        }
                    }
                }
            }
        },
        "/v1/errors/stats": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a stats of all errors from the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "errors"
                ],
                "summary": "Get errors stats",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Group ID",
                        "name": "groupId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved stats of errors",
                        "schema": {
                            "$ref": "#/definitions/errors.Stats"
                        }
                    }
                }
            }
        },
        "/v1/errors/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get an error by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "errors"
                ],
                "summary": "Get an error by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Error ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/errors.Entity"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates an existing error entry",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "errors"
                ],
                "summary": "Update an error entry",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Error entry ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Error update data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/errors.Update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated error entry",
                        "schema": {
                            "$ref": "#/definitions/errors.Entity"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Error entry not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an error entry by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "errors"
                ],
                "summary": "Delete an error entry",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Error entry ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request - when ID is not provided",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - when something goes wrong",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/log-groups": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of all logs from the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "log-groups"
                ],
                "summary": "Get all log groups",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Time logs from",
                        "name": "timeFrom",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Time logs to",
                        "name": "timeTo",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "DEBUG",
                            "INFO",
                            "WARN",
                            "ERROR"
                        ],
                        "type": "string",
                        "description": "Filter by log level",
                        "name": "level",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search in message field",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order (asc or desc)",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of logs",
                        "schema": {
                            "$ref": "#/definitions/loggroup.EntityList"
                        }
                    }
                }
            }
        },
        "/v1/log-groups/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a log group by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "log-groups"
                ],
                "summary": "Get a log group by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Log ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/loggroup.Entity"
                        }
                    }
                }
            }
        },
        "/v1/login": {
            "post": {
                "description": "Login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "Login",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.Login"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully login",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/logs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of all logs from the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logs"
                ],
                "summary": "Get all logs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Group ID",
                        "name": "groupId",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Time logs from",
                        "name": "timeFrom",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Time logs to",
                        "name": "timeTo",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "DEBUG",
                            "INFO",
                            "WARN",
                            "ERROR"
                        ],
                        "type": "string",
                        "description": "Filter by log level",
                        "name": "level",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search in message field",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order (asc or desc)",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of logs",
                        "schema": {
                            "$ref": "#/definitions/log.EntityList"
                        }
                    }
                }
            }
        },
        "/v1/logs/stats": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a stats of all logs from the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logs"
                ],
                "summary": "Get logs stats",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Group ID",
                        "name": "groupId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved stats of logs",
                        "schema": {
                            "$ref": "#/definitions/log.Stats"
                        }
                    }
                }
            }
        },
        "/v1/logs/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a log by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logs"
                ],
                "summary": "Get a log by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Log ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/log.Entity"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates an existing log entry",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logs"
                ],
                "summary": "Update a log entry",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Log entry ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Log update data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/log.Update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated log entry",
                        "schema": {
                            "$ref": "#/definitions/log.Entity"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Log entry not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a log entry by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logs"
                ],
                "summary": "Delete a log entry",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Log entry ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request - when ID is not provided",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - when something goes wrong",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/projects": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of all projects from the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Get all projects",
                "parameters": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order (asc or desc)",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of projects",
                        "schema": {
                            "$ref": "#/definitions/project.EntityList"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new project entry in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Create a new project entry",
                "parameters": [
                    {
                        "description": "Project entry creation data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/project.Create"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created project entry",
                        "schema": {
                            "$ref": "#/definitions/project.Entity"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/projects/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a project by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Get a project by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/project.Entity"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates an existing project entry",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Update a project entry",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project entry ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Project update data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/project.Update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated project entry",
                        "schema": {
                            "$ref": "#/definitions/project.Entity"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Project entry not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a project entry by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Delete a project entry",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project entry ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request - when ID is not provided",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - when something goes wrong",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/projects/{id}/dsn": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a project DSN",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Get a project DSN",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/signup": {
            "post": {
                "description": "Signup",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Signup",
                "parameters": [
                    {
                        "description": "Signup",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.Signup"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully signup",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "errors.Create": {
            "type": "object",
            "required": [
                "file",
                "line",
                "message",
                "stacktrace",
                "time"
            ],
            "properties": {
                "bodyParams": {
                    "description": "@Schema(\n  type = \"object\",\n  example = `{\"a\": 5, \"b\": 0}`\n)",
                    "type": "object",
                    "additionalProperties": true
                },
                "context": {
                    "description": "Context can be any JSON value\n@Schema(\n  oneOf={\n    string,\n    object,\n    array,\n    number,\n    boolean,\n    null\n  },\n  example={\"key\":\"value\"}\n)"
                },
                "cookies": {
                    "description": "@Schema(\n  type = \"object\",\n  example = `{\"sessionId\": \"abc123\", \"theme\": \"dark\"}`\n)",
                    "type": "object",
                    "additionalProperties": true
                },
                "env": {
                    "description": "@Schema(\n  type = \"object\",\n  example = `{\"APP_ENV\": \"production\", \"DB_HOST\": \"db.example.com\"}`\n)",
                    "type": "object",
                    "additionalProperties": true
                },
                "file": {
                    "type": "string",
                    "example": "/var/www/app/index.php"
                },
                "files": {
                    "description": "@Schema(\n  type = \"object\",\n  example = `{\"avatar\": \"avatar.jpg\", \"size\": 1024}`\n)",
                    "type": "object",
                    "additionalProperties": true
                },
                "headers": {
                    "description": "@Schema(\n  type = \"object\",\n  example = `{\"Content-Type\": \"application/json\", \"Authorization\": \"Bearer token\"}`\n)",
                    "type": "object",
                    "additionalProperties": true
                },
                "ip": {
                    "type": "string",
                    "example": "192.168.1.1"
                },
                "line": {
                    "type": "integer",
                    "example": 15
                },
                "message": {
                    "type": "string",
                    "example": "Division by zero in calculate()"
                },
                "method": {
                    "type": "string",
                    "example": "POST"
                },
                "queryParams": {
                    "description": "@Schema(\n  type = \"object\",\n  example = `{\"page\": 1, \"limit\": 10}`\n)",
                    "type": "object",
                    "additionalProperties": true
                },
                "session": {
                    "description": "@Schema(\n  type = \"object\",\n  example = `{\"userId\": 123, \"role\": \"admin\"}`\n)",
                    "type": "object",
                    "additionalProperties": true
                },
                "stacktrace": {},
                "time": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1704067200000
                },
                "url": {
                    "type": "string",
                    "example": "https://example.com/api/v1/calculate"
                }
            }
        },
        "errors.Entity": {
            "type": "object",
            "required": [
                "file",
                "line",
                "message",
                "stacktrace"
            ],
            "properties": {
                "bodyParams": {
                    "type": "object",
                    "additionalProperties": true
                },
                "context": {
                    "description": "Context can be any JSON value\n@Schema(\n  oneOf={\n    string,\n    object,\n    array,\n    number,\n    boolean,\n    null\n  },\n  example={\"key\":\"value\"}\n)"
                },
                "cookies": {
                    "type": "object",
                    "additionalProperties": true
                },
                "env": {
                    "type": "object",
                    "additionalProperties": true
                },
                "file": {
                    "type": "string",
                    "example": "/var/www/index.php"
                },
                "files": {
                    "type": "object",
                    "additionalProperties": true
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": true
                },
                "id": {
                    "type": "string",
                    "example": "a08929b5-d4f0-4ceb-9cfe-bb4fc05b030c"
                },
                "ip": {
                    "type": "string",
                    "example": "192.168.1.1"
                },
                "line": {
                    "type": "integer",
                    "example": 15
                },
                "message": {
                    "type": "string",
                    "example": "Error: Division by zero"
                },
                "method": {
                    "type": "string",
                    "example": "POST"
                },
                "queryParams": {
                    "type": "object",
                    "additionalProperties": true
                },
                "session": {
                    "type": "object",
                    "additionalProperties": true
                },
                "stacktrace": {},
                "time": {
                    "description": "Unix timestamp in milliseconds",
                    "type": "integer",
                    "example": 1704067200000
                },
                "url": {
                    "type": "string",
                    "example": "https://example.com/api/v1/calculate"
                }
            }
        },
        "errors.EntityList": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/errors.Entity"
                    }
                }
            }
        },
        "errors.Stats": {
            "type": "object",
            "properties": {
                "last24h": {
                    "type": "integer"
                },
                "last30d": {
                    "type": "integer"
                },
                "last7d": {
                    "type": "integer"
                }
            }
        },
        "errors.Update": {
            "type": "object",
            "required": [
                "file",
                "line",
                "message",
                "stacktrace"
            ],
            "properties": {
                "context": {
                    "description": "Context can be any JSON value\n@Schema(\n  oneOf={\n    string,\n    object,\n    array,\n    number,\n    boolean,\n    null\n  },\n  example={\"key\":\"value\"}\n)"
                },
                "file": {
                    "type": "string",
                    "example": "index.php"
                },
                "line": {
                    "type": "integer",
                    "example": 1
                },
                "message": {
                    "type": "string",
                    "example": "Error message"
                },
                "stacktrace": {}
            }
        },
        "errorsgroup.BatchUpdateStatusRequest": {
            "type": "object",
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "resolved",
                        "unresolved",
                        "ignored"
                    ],
                    "example": "resolved"
                }
            }
        },
        "errorsgroup.Entity": {
            "type": "object",
            "required": [
                "file",
                "line",
                "message"
            ],
            "properties": {
                "counter": {
                    "type": "integer",
                    "example": 18
                },
                "file": {
                    "type": "string",
                    "example": "index.php"
                },
                "firstSeenAt": {
                    "type": "integer",
                    "example": 1704067200
                },
                "id": {
                    "type": "string",
                    "example": "a08929b5-d4f0-4ceb-9cfe-bb4fc05b030c"
                },
                "lastSeenAt": {
                    "type": "integer",
                    "example": 1704067200
                },
                "line": {
                    "type": "integer",
                    "example": 1
                },
                "message": {
                    "type": "string",
                    "example": "Error message"
                },
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/errorsgroup.Status"
                        }
                    ],
                    "example": "unresolved"
                }
            }
        },
        "errorsgroup.EntityList": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/errorsgroup.Entity"
                    }
                }
            }
        },
        "errorsgroup.Status": {
            "type": "string",
            "enum": [
                "unresolved",
                "resolved",
                "ignored"
            ],
            "x-enum-varnames": [
                "StatusUnresolved",
                "StatusResolved",
                "StatusIgnored"
            ]
        },
        "errorsgroup.UpdateStatusRequest": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "resolved",
                        "unresolved",
                        "ignored"
                    ],
                    "example": "resolved"
                }
            }
        },
        "log.Create": {
            "type": "object",
            "required": [
                "level",
                "message",
                "time"
            ],
            "properties": {
                "context": {
                    "description": "Context can be any JSON value\n@Schema(\n  oneOf={\n    string,\n    object,\n    array,\n    number,\n    boolean,\n    null\n  },\n  example={\"key\":\"value\"}\n)"
                },
                "level": {
                    "type": "string",
                    "enum": [
                        "DEBUG",
                        "INFO",
                        "WARN",
                        "ERROR",
                        "FATAL"
                    ]
                },
                "message": {
                    "type": "string",
                    "example": "first log message"
                },
                "time": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1704067200000
                }
            }
        },
        "log.Entity": {
            "type": "object",
            "properties": {
                "context": {
                    "description": "Context can be any JSON value\n@Schema(\n  oneOf={\n    string,\n    object,\n    array,\n    number,\n    boolean,\n    null\n  },\n  example={\"key\":\"value\"}\n)"
                },
                "id": {
                    "type": "string",
                    "example": "a08929b5-d4f0-4ceb-9cfe-bb4fc05b030c"
                },
                "level": {
                    "type": "string",
                    "example": "INFO"
                },
                "message": {
                    "type": "string",
                    "example": "first log message"
                },
                "time": {
                    "type": "integer",
                    "example": 1704067200000
                }
            }
        },
        "log.EntityList": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/log.Entity"
                    }
                }
            }
        },
        "log.Stats": {
            "type": "object",
            "properties": {
                "last24h": {
                    "type": "integer"
                },
                "last30d": {
                    "type": "integer"
                },
                "last7d": {
                    "type": "integer"
                }
            }
        },
        "log.Update": {
            "type": "object",
            "properties": {
                "context": {
                    "description": "Context can be any JSON value\n@Schema(\n  oneOf={\n    string,\n    object,\n    array,\n    number,\n    boolean,\n    null\n  },\n  example={\"key\":\"value\"}\n)"
                },
                "level": {
                    "type": "string",
                    "enum": [
                        "DEBUG",
                        "INFO",
                        "WARN",
                        "ERROR",
                        "FATAL"
                    ]
                },
                "message": {
                    "type": "string",
                    "example": "updated log message"
                }
            }
        },
        "loggroup.Entity": {
            "type": "object",
            "required": [
                "message"
            ],
            "properties": {
                "counter": {
                    "type": "integer",
                    "example": 18
                },
                "firstSeenAt": {
                    "type": "integer",
                    "example": 1704067200
                },
                "id": {
                    "type": "string",
                    "example": "a08929b5-d4f0-4ceb-9cfe-bb4fc05b030c"
                },
                "lastSeenAt": {
                    "type": "integer",
                    "example": 1704067200
                },
                "level": {
                    "type": "string",
                    "example": "INFO"
                },
                "message": {
                    "type": "string",
                    "example": "Log message"
                }
            }
        },
        "loggroup.EntityList": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/loggroup.Entity"
                    }
                }
            }
        },
        "project.Create": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "New project"
                }
            }
        },
        "project.Entity": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "a08929b5-d4f0-4ceb-9cfe-bb4fc05b030c"
                },
                "logsLast24h": {
                    "type": "integer",
                    "example": 42
                },
                "name": {
                    "type": "string",
                    "example": "New project"
                },
                "openErrors": {
                    "description": "Aggregated stats",
                    "type": "integer",
                    "example": 5
                }
            }
        },
        "project.EntityList": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/project.Entity"
                    }
                }
            }
        },
        "project.Update": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "New project"
                }
            }
        },
        "users.Login": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "me@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "1234567890"
                }
            }
        },
        "users.Signup": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "me@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "1234567890"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}